generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  name String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  latinName String?
  telPrefix String?

  isAvailible Boolean @default(true)

  addresses Address[]
}

model Address {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address    String
  title      String?
  unit       Int
  details    String?
  postalCode String?

  xAxis Float?
  yAxis Float?

  isAvailible Boolean @default(true)
  isValid     Boolean @default(true)

  cityName String
  city     City   @relation(fields: [cityName], references: [name])

  userPhoneNumber String
  userPhone       User   @relation(fields: [userPhoneNumber], references: [phoneNumber])

  stores Store[]
  orders Order[]
}

model Store {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String
  branchName        String?
  description       String?
  avatarUrl         String?
  cityName          String // DENORMALIZATION
  minOrderPrice     Float
  baseShipmentPrice Float   @default(0)
  desliveryRadius   Float? // KM

  isAvailible Boolean @default(true)
  isVerified  Boolean @default(true)

  addressId Int
  address   Address @relation(fields: [addressId], references: [id])

  takesOfflineOrder Boolean
  takesOnlineOrder  Boolean

  score      Float @default(0) // denormalization
  scoreCount Int   @default(0) // denormalization

  storeKindName String
  storeKind     StoreKind @relation(fields: [storeKindName], references: [name])

  userPhoneNumber String
  userPhone       User   @relation(fields: [userPhoneNumber], references: [phoneNumber])

  storeHasItems          StoreHasItems[]
  storeHasItemCategories StoreHasCategories[]
  Schedules              storeSchedule[]
  orders                 Order[]
}

model StoreKind {
  name String @id

  createdAt DateTime @default(now())

  avatarUrl String

  isAvailible Boolean @default(true)

  stores Store[]
}

model Item {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String
  description        String?
  avatarUrl          String?
  basePrice          Float?
  estimatedReadyTime Int     @default(15)

  isAvailible Boolean @default(true)
  isVerified  Boolean @default(true)

  itemCategoryName String
  itemCategory     ItemCategory @relation(fields: [itemCategoryName], references: [name])

  storeHasItems StoreHasItems[]
  orderHasItems OrderHasItems[]
}

model ItemCategory {
  name String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatarUrl String?
  isMain    Boolean @default(false)

  items                  Item[]
  storeHasItemCategories StoreHasCategories[]
}

model StoreHasItems {
  storeId Int
  store   Store @relation(fields: [storeId], references: [id])
  itemId  Int
  item    Item  @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price              Float
  discountPercent    Float?
  remainingCount     Int
  estimatedReadyTime Int     @default(15)
  infiniteSupply     Boolean @default(false)

  isAvailible Boolean @default(true)
  isVerified  Boolean @default(true)

  @@unique([storeId, itemId])
}

model StoreHasCategories {
  storeId          Int
  store            Store        @relation(fields: [storeId], references: [id])
  itemCategoryName String
  itemCategory     ItemCategory @relation(fields: [itemCategoryName], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discountPercent Int?

  isAvailible Boolean @default(true)
  isVerified  Boolean @default(true)

  @@unique([storeId, itemCategoryName])
}

model storeSchedule {
  storeId Int
  store   Store @relation(fields: [storeId], references: [id])

  dayNumber Int // 0 ~ Sunday
  startTime Float
  endTime   Float

  @@id([storeId, startTime, endTime, dayNumber])
}

model User {
  phoneNumber String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?   @default("کاربر")
  lastName  String?
  birthday  DateTime?
  gender    Boolean   @default(false) //DENORMALIZED
  email     String?   @unique
  credit    Float     @default(0)

  verificationCode       String?
  verificationCodeExpiry DateTime?

  isVerified  Boolean @default(true)
  isSuspended Boolean @default(false)

  addresses Address[]
  stores    Store[]
  orders    Order[]
}

model Order {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalPrice            Float
  shipmentPrice         Float
  taxPercent            Int
  packagingPrice        Float
  estimatedReadyTime    Int
  estimatedShipmentTime Int
  description           String?
  billDate              DateTime?

  isBilled          Boolean @default(true)
  isInCart          Boolean @default(false)
  isVerifiedByAdmin Boolean @default(true)
  isVerifiedByStore Boolean @default(true)
  isShipped         Boolean @default(false)
  isDelivered       Boolean @default(false)
  isCanceled        Boolean @default(false)
  isDelayedByStore  Boolean @default(false)

  storeId Int
  store   Store @relation(fields: [storeId], references: [id])

  userPhoneNumber String
  user            User   @relation(fields: [userPhoneNumber], references: [phoneNumber])

  addressId Int
  address   Address @relation(fields: [addressId], references: [id])

  comments      Comment[]
  orderHasItems OrderHasItems[]
}

model OrderHasItems {
  count Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  item   Item @relation(fields: [itemId], references: [id])
  itemId Int

  @@id([itemId, orderId])
}

model Comment {
  orderId Int @id

  score       Int
  description String?
  response    String?
  responsedBy String? // DENORMALIZED

  wasDeliveryPositive Boolean
  wasPositive         Boolean

  isVerified Boolean @default(true)
  isVisible  Boolean @default(false)

  order Order @relation(fields: [orderId], references: [id])
}
